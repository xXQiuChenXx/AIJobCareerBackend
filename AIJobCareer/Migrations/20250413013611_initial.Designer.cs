// <auto-generated />
using System;
using AIJobCareer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIJobCareer.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250413013611_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AIJobCareer.Models.Area", b =>
                {
                    b.Property<int>("area_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("area_id"));

                    b.Property<string>("area_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("area_id");

                    b.ToTable("AREA", (string)null);

                    b.HasData(
                        new
                        {
                            area_id = 1,
                            area_name = "Kuching"
                        },
                        new
                        {
                            area_id = 2,
                            area_name = "Miri"
                        },
                        new
                        {
                            area_id = 3,
                            area_name = "Sibu"
                        },
                        new
                        {
                            area_id = 4,
                            area_name = "Bintulu"
                        },
                        new
                        {
                            area_id = 5,
                            area_name = "Samarahan"
                        },
                        new
                        {
                            area_id = 6,
                            area_name = "Sri Aman"
                        },
                        new
                        {
                            area_id = 7,
                            area_name = "Kapit"
                        },
                        new
                        {
                            area_id = 8,
                            area_name = "Limbang"
                        },
                        new
                        {
                            area_id = 9,
                            area_name = "Sarikei"
                        },
                        new
                        {
                            area_id = 10,
                            area_name = "Betong"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.Property<string>("company_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("company_area_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("company_founded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("company_icon")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("company_industry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("company_intro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("company_website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("company_id");

                    b.HasIndex("company_area_id");

                    b.ToTable("COMPANY", (string)null);

                    b.HasData(
                        new
                        {
                            company_id = "sarawakenergy",
                            company_area_id = 1,
                            company_founded = new DateTime(2015, 4, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3425),
                            company_icon = "",
                            company_industry = "Energy & Utilities",
                            company_intro = "Leading energy provider in Sarawak focusing on renewable energy sources.",
                            company_name = "Sarawak Energy Berhad",
                            company_website = "https://www.sarawakenergy.com"
                        },
                        new
                        {
                            company_id = "petronas",
                            company_area_id = 2,
                            company_founded = new DateTime(2017, 1, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3441),
                            company_icon = "",
                            company_industry = "Oil & Gas",
                            company_intro = "Oil and gas exploration company operating in Sarawak's offshore regions.",
                            company_name = "Petronas Carigali Sdn Bhd",
                            company_website = "https://www.petronas.com"
                        },
                        new
                        {
                            company_id = "sarawakforestrycorporation",
                            company_area_id = 1,
                            company_founded = new DateTime(2020, 1, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3444),
                            company_icon = "",
                            company_industry = "Forestry & Environmental Services",
                            company_intro = "Responsible for sustainable management of Sarawak's forest resources.",
                            company_name = "Sarawak Forestry Corporation",
                            company_website = "https://www.sarawakforestry.com"
                        },
                        new
                        {
                            company_id = "sdec",
                            company_area_id = 5,
                            company_founded = new DateTime(2018, 1, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3446),
                            company_icon = "",
                            company_industry = "Technology & Digital Services",
                            company_intro = "Driving digital transformation and innovation across Sarawak.",
                            company_name = "Sarawak Digital Economy Corporation",
                            company_website = "https://www.sdec.com.my"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Education", b =>
                {
                    b.Property<Guid>("education_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("degree_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("end_year")
                        .HasColumnType("int");

                    b.Property<string>("institution_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("start_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("education_id");

                    b.HasIndex("user_id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("job_id"));

                    b.Property<DateTime>("Posted_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("job_benefit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("job_company_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("job_deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("job_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("job_location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("job_requirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("job_responsible")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("job_salary_max")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("job_salary_min")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("job_status")
                        .IsRequired()
                        .HasColumnType("enum('open', 'closed')");

                    b.Property<string>("job_title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("job_type")
                        .IsRequired()
                        .HasColumnType("enum('internship', 'freelance', 'full_time', 'part_time', 'contract')");

                    b.HasKey("job_id");

                    b.HasIndex("job_company_id");

                    b.ToTable("JOB", (string)null);

                    b.HasData(
                        new
                        {
                            job_id = 1,
                            Posted_Date = new DateTime(2025, 3, 24, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3499),
                            job_benefit = "Health insurance,\nPerformance bonus,\nProfessional development allowance.",
                            job_company_id = "sarawakenergy",
                            job_deadline = new DateTime(2025, 5, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3501),
                            job_description = "Develop and maintain enterprise software applications for energy management systems.",
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's degree in Computer Science,\n5+ years experience in software development.",
                            job_responsible = "Lead software development projects,\nMentor junior developers,\nCollaborate with stakeholders.",
                            job_salary_max = 7500.00m,
                            job_salary_min = 5000.00m,
                            job_status = "Open",
                            job_title = "Senior Software Developer",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 2,
                            Posted_Date = new DateTime(2025, 4, 3, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3531),
                            job_benefit = "Housing allowance,\nTransportation,\nMedical coverage,\nAnnual bonus.",
                            job_company_id = "petronas",
                            job_deadline = new DateTime(2025, 5, 17, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3532),
                            job_description = "Design and implement strategies for efficient oil and gas extraction. Collaborate with multidisciplinary teams to solve complex drilling challenges.",
                            job_location = "Miri, Sarawak",
                            job_requirement = "Bachelor's degree in Petroleum Engineering,\n5+ years field experience.",
                            job_responsible = "Oversee drilling operations,\nOptimize oil extraction processes,\nCoordinate with field teams.",
                            job_salary_max = 9000.00m,
                            job_salary_min = 6500.00m,
                            job_status = "Open",
                            job_title = "Petroleum Engineer",
                            job_type = "Contract"
                        },
                        new
                        {
                            job_id = 3,
                            Posted_Date = new DateTime(2025, 2, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3535),
                            job_benefit = "Field allowance,\nGovernment pension scheme,\nPaid study leave.",
                            job_company_id = "sarawakforestrycorporation",
                            job_deadline = new DateTime(2025, 5, 23, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3536),
                            job_description = "Monitor forest health, implement conservation programs, and work with local communities to promote sustainable forest management practices.",
                            job_location = "Kuching, Sarawak (with field work)",
                            job_requirement = "Bachelor's degree in Forestry or Environmental Science,\nKnowledge of local ecosystems.",
                            job_responsible = "Implement and monitor conservation programs,\nEngage with local communities,\nReport on ecosystem health.",
                            job_salary_max = 5500.00m,
                            job_salary_min = 4000.00m,
                            job_status = "Open",
                            job_title = "Forest Conservation Officer",
                            job_type = "Part_Time"
                        },
                        new
                        {
                            job_id = 4,
                            Posted_Date = new DateTime(2024, 12, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3539),
                            job_benefit = "Performance bonuses,\nFlexible working arrangements,\nTraining opportunities.",
                            job_company_id = "sdec",
                            job_deadline = new DateTime(2025, 1, 12, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3539),
                            job_description = "Create and execute digital marketing campaigns to promote Sarawak's digital initiatives across various platforms and channels.",
                            job_location = "Samarahan, Sarawak",
                            job_requirement = "Bachelor's degree in Marketing or Communications,\nExperience with digital marketing tools.",
                            job_responsible = "Develop digital marketing strategies,\nManage social media and PPC campaigns,\nAnalyze performance metrics.",
                            job_salary_max = 5000.00m,
                            job_salary_min = 3500.00m,
                            job_status = "Closed",
                            job_title = "Digital Marketing Specialist",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 5,
                            Posted_Date = new DateTime(2025, 3, 4, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3542),
                            job_benefit = "Professional development fund,\nHealth insurance,\nPerformance bonus.",
                            job_company_id = "sarawakenergy",
                            job_deadline = new DateTime(2025, 4, 18, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3542),
                            job_description = "Evaluate renewable energy projects, conduct feasibility studies, and provide recommendations for sustainable energy solutions.",
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's degree in Environmental Engineering or related field,\nKnowledge of renewable energy technologies.",
                            job_responsible = "Analyze project feasibility,\nModel energy outputs,\nPrepare recommendation reports.",
                            job_salary_max = 6000.00m,
                            job_salary_min = 4500.00m,
                            job_status = "Open",
                            job_title = "Renewable Energy Analyst",
                            job_type = "Internship"
                        },
                        new
                        {
                            job_id = 6,
                            Posted_Date = new DateTime(2025, 3, 10, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3544),
                            job_benefit = "Remote work options,\nMedical coverage,\nProfessional development.",
                            job_company_id = "sarawakforestrycorporation",
                            job_deadline = new DateTime(2025, 4, 24, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3545),
                            job_description = "Develop and maintain web applications that support Sarawak's digital economy initiatives, from database design to user interface implementation.",
                            job_location = "Samarahan, Sarawak",
                            job_requirement = "Bachelor's degree in Computer Science,\nProficiency in front‑end and back‑end technologies.",
                            job_responsible = "Design and develop web applications,\nMaintain backend services,\nImplement user-friendly interfaces.",
                            job_salary_max = 7000.00m,
                            job_salary_min = 4800.00m,
                            job_status = "Open",
                            job_title = "Full Stack Developer",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 7,
                            Posted_Date = new DateTime(2025, 3, 29, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3547),
                            job_benefit = "Health insurance,\nStock options,\nTraining budget.",
                            job_company_id = "sarawakenergy",
                            job_deadline = new DateTime(2025, 5, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3548),
                            job_description = "Analyze large datasets to extract insights and build predictive models for energy demand forecasting.",
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's/Master's in Data Science or related,\n3+ years experience in data analytics,\nProficiency in Python and ML frameworks.",
                            job_responsible = "Develop data pipelines,\nBuild and validate predictive models,\nPresent findings to stakeholders.",
                            job_salary_max = 8500.00m,
                            job_salary_min = 6000.00m,
                            job_status = "Open",
                            job_title = "Data Scientist",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 8,
                            Posted_Date = new DateTime(2025, 3, 19, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3551),
                            job_benefit = "Housing allowance,\nMedical coverage,\nAnnual bonus.",
                            job_company_id = "petronas",
                            job_deadline = new DateTime(2025, 4, 28, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3551),
                            job_description = "Plan and supervise infrastructure projects including roads, bridges, and public facilities.",
                            job_location = "Miri, Sarawak",
                            job_requirement = "Bachelor's degree in Civil Engineering,\n4+ years site experience,\nKnowledge of local building codes.",
                            job_responsible = "Design structural plans,\nOversee construction sites,\nEnsure compliance with safety standards.",
                            job_salary_max = 8000.00m,
                            job_salary_min = 5500.00m,
                            job_status = "Open",
                            job_title = "Civil Engineer",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 9,
                            Posted_Date = new DateTime(2025, 4, 8, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3554),
                            job_benefit = "Field allowance,\nFlexible schedule,\nEquipment provision.",
                            job_company_id = "sarawakforestrycorporation",
                            job_deadline = new DateTime(2025, 5, 18, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3554),
                            job_description = "Manage GIS databases to support forestry conservation and land management.",
                            job_location = "Samarahan, Sarawak",
                            job_requirement = "Bachelor's in Geography/GIS,\nProficiency in ArcGIS/QGIS,\n2+ years GIS experience.",
                            job_responsible = "Develop and maintain GIS maps,\nConduct spatial analysis,\nTrain staff on GIS tools.",
                            job_salary_max = 6500.00m,
                            job_salary_min = 4500.00m,
                            job_status = "Open",
                            job_title = "GIS Specialist",
                            job_type = "Contract"
                        },
                        new
                        {
                            job_id = 10,
                            Posted_Date = new DateTime(2025, 4, 1, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3556),
                            job_benefit = "Flexible working hours,\nHealth coverage,\nProfessional development.",
                            job_company_id = "sdec",
                            job_deadline = new DateTime(2025, 5, 16, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3557),
                            job_description = "Design intuitive user interfaces for web and mobile applications to enhance user experience.",
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's in Design or HCI,\n3+ years UX/UI experience,\nProficiency in Figma and Sketch.",
                            job_responsible = "Create wireframes and prototypes,\nConduct user research,\nCollaborate with developers.",
                            job_salary_max = 7000.00m,
                            job_salary_min = 5000.00m,
                            job_status = "Open",
                            job_title = "UX Designer",
                            job_type = "Full_Time"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Portfolio")
                        .HasColumnType("longtext");

                    b.Property<bool>("Relocate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("resume_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.HasIndex("resume_id")
                        .IsUnique();

                    b.ToTable("JOB_APPLICATION", (string)null);
                });

            modelBuilder.Entity("AIJobCareer.Models.JobSkill", b =>
                {
                    b.Property<int>("JS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("JS_ID"));

                    b.Property<int>("JS_JOB_ID")
                        .HasColumnType("int");

                    b.Property<int>("JS_SKILL_ID")
                        .HasColumnType("int");

                    b.HasKey("JS_ID");

                    b.HasIndex("JS_JOB_ID");

                    b.HasIndex("JS_SKILL_ID");

                    b.ToTable("JOB_SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            JS_ID = 1,
                            JS_JOB_ID = 1,
                            JS_SKILL_ID = 1
                        },
                        new
                        {
                            JS_ID = 2,
                            JS_JOB_ID = 1,
                            JS_SKILL_ID = 4
                        },
                        new
                        {
                            JS_ID = 3,
                            JS_JOB_ID = 2,
                            JS_SKILL_ID = 5
                        },
                        new
                        {
                            JS_ID = 4,
                            JS_JOB_ID = 3,
                            JS_SKILL_ID = 7
                        },
                        new
                        {
                            JS_ID = 5,
                            JS_JOB_ID = 4,
                            JS_SKILL_ID = 6
                        },
                        new
                        {
                            JS_ID = 6,
                            JS_JOB_ID = 6,
                            JS_SKILL_ID = 4
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Notification", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<string>("notification_company_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("notification_status")
                        .IsRequired()
                        .HasColumnType("enum('read', 'unread')");

                    b.Property<string>("notification_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("notification_timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("notification_user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("notification_id");

                    b.HasIndex("notification_company_id");

                    b.HasIndex("notification_user_id");

                    b.ToTable("NOTIFICATION", (string)null);

                    b.HasData(
                        new
                        {
                            notification_id = 1,
                            notification_company_id = "sarawakenergy",
                            notification_status = "unread",
                            notification_text = "Your application for Senior Software Developer has been received. We will review it shortly.",
                            notification_timestamp = new DateTime(2025, 4, 3, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3606),
                            notification_user_id = new Guid("e284ddf2-049e-4321-95d5-891009a97a7d")
                        },
                        new
                        {
                            notification_id = 2,
                            notification_company_id = "sarawakforestrycorporation",
                            notification_status = "read",
                            notification_text = "You have been shortlisted for the Forest Conservation Officer position. Please prepare for an interview.",
                            notification_timestamp = new DateTime(2025, 4, 5, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3608),
                            notification_user_id = new Guid("77742591-68d6-40b3-81ab-1af77bce5c9d")
                        },
                        new
                        {
                            notification_id = 3,
                            notification_company_id = "petronas",
                            notification_status = "unread",
                            notification_text = "Thank you for your application to Petronas Carigali. Your application is under review.",
                            notification_timestamp = new DateTime(2025, 4, 8, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3610),
                            notification_user_id = new Guid("10daf21c-8cdf-4cba-8cf7-28859c4da0f7")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Project", b =>
                {
                    b.Property<Guid>("project_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("project_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("project_url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("project_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("project_id");

                    b.HasIndex("user_id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AIJobCareer.Models.Publication", b =>
                {
                    b.Property<Guid>("publication_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("publication_title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("publication_url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("publication_year")
                        .HasColumnType("int");

                    b.Property<string>("publisher")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("publication_id");

                    b.HasIndex("user_id");

                    b.ToTable("Publication");
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.Property<int>("resume_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("resume_id"));

                    b.Property<string>("job_application_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("resume_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("resume_url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("resume_user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("resume_id");

                    b.HasIndex("resume_user_id");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("AIJobCareer.Models.Skill", b =>
                {
                    b.Property<int>("skill_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("skill_id"));

                    b.Property<string>("skill_level")
                        .IsRequired()
                        .HasColumnType("enum('beginner', 'intermediate', 'proficient', 'advanced', 'expert')");

                    b.Property<string>("skill_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("skill_id");

                    b.ToTable("SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            skill_id = 1,
                            skill_level = "Advanced",
                            skill_name = "C# Programming"
                        },
                        new
                        {
                            skill_id = 2,
                            skill_level = "Intermediate",
                            skill_name = "Database Management"
                        },
                        new
                        {
                            skill_id = 3,
                            skill_level = "Advanced",
                            skill_name = "Project Management"
                        },
                        new
                        {
                            skill_id = 4,
                            skill_level = "Advanced",
                            skill_name = "Web Development"
                        },
                        new
                        {
                            skill_id = 5,
                            skill_level = "Expert",
                            skill_name = "Petroleum Engineering"
                        },
                        new
                        {
                            skill_id = 6,
                            skill_level = "Intermediate",
                            skill_name = "Digital Marketing"
                        },
                        new
                        {
                            skill_id = 7,
                            skill_level = "Advanced",
                            skill_name = "Forestry Management"
                        },
                        new
                        {
                            skill_id = 8,
                            skill_level = "Intermediate",
                            skill_name = "Tourism & Hospitality"
                        },
                        new
                        {
                            skill_id = 9,
                            skill_level = "Expert",
                            skill_name = "Indigenous Culture Knowledge"
                        },
                        new
                        {
                            skill_id = 10,
                            skill_level = "Advanced",
                            skill_name = "Agricultural Science"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("last_login_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("user_account_created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("user_age")
                        .HasColumnType("int");

                    b.Property<int?>("user_area_id")
                        .HasColumnType("int");

                    b.Property<string>("user_company_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_contact_number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_first_name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("user_icon")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_intro")
                        .HasColumnType("longtext");

                    b.Property<string>("user_last_name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("user_password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_privacy_status")
                        .IsRequired()
                        .HasColumnType("enum('public', 'private')");

                    b.Property<string>("user_role")
                        .IsRequired()
                        .HasColumnType("enum('job_seeker', 'business')");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("user_id");

                    b.HasIndex("user_area_id");

                    b.HasIndex("user_company_id")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);

                    b.HasData(
                        new
                        {
                            user_id = new Guid("e284ddf2-049e-4321-95d5-891009a97a7d"),
                            user_account_created_time = new DateTime(2024, 10, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3471),
                            user_age = 28,
                            user_area_id = 1,
                            user_contact_number = "0198765432",
                            user_email = "ahmad@example.com",
                            user_first_name = "Ahmad",
                            user_icon = "ahmad_profile.jpg",
                            user_intro = "Software developer with 5 years of experience in web technologies.",
                            user_last_name = "bin Ibrahim",
                            user_password = "hashed_password_1",
                            user_privacy_status = "public",
                            user_role = "job_seeker",
                            username = "ahmad_ibrahim"
                        },
                        new
                        {
                            user_id = new Guid("77742591-68d6-40b3-81ab-1af77bce5c9d"),
                            user_account_created_time = new DateTime(2025, 1, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3478),
                            user_age = 32,
                            user_area_id = 3,
                            user_contact_number = "0123456789",
                            user_email = "siti@example.com",
                            user_first_name = "Siti",
                            user_icon = "siti_profile.jpg",
                            user_intro = "Environmental scientist with expertise in tropical forest conservation.",
                            user_last_name = "Nur Aminah",
                            user_password = "hashed_password_2",
                            user_privacy_status = "private",
                            user_role = "job_seeker",
                            username = "siti_aminah"
                        },
                        new
                        {
                            user_id = new Guid("10daf21c-8cdf-4cba-8cf7-28859c4da0f7"),
                            user_account_created_time = new DateTime(2024, 7, 13, 9, 36, 11, 442, DateTimeKind.Local).AddTicks(3483),
                            user_age = 35,
                            user_area_id = 2,
                            user_contact_number = "0167890123",
                            user_email = "rajesh@example.com",
                            user_first_name = "Rajesh",
                            user_icon = "rajesh_profile.jpg",
                            user_intro = "Petroleum engineer with 10 years experience in offshore drilling.",
                            user_last_name = "Kumar",
                            user_password = "hashed_password_3",
                            user_privacy_status = "public",
                            user_role = "job_seeker",
                            username = "rajesh_kumar"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.UserSkill", b =>
                {
                    b.Property<int>("US_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("US_ID"));

                    b.Property<int>("US_SKILL_ID")
                        .HasColumnType("int");

                    b.Property<Guid>("US_USER_ID")
                        .HasColumnType("char(36)");

                    b.HasKey("US_ID");

                    b.HasIndex("US_SKILL_ID");

                    b.HasIndex("US_USER_ID");

                    b.ToTable("USER_SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            US_ID = 1,
                            US_SKILL_ID = 1,
                            US_USER_ID = new Guid("e284ddf2-049e-4321-95d5-891009a97a7d")
                        },
                        new
                        {
                            US_ID = 2,
                            US_SKILL_ID = 7,
                            US_USER_ID = new Guid("77742591-68d6-40b3-81ab-1af77bce5c9d")
                        },
                        new
                        {
                            US_ID = 3,
                            US_SKILL_ID = 5,
                            US_USER_ID = new Guid("10daf21c-8cdf-4cba-8cf7-28859c4da0f7")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.WorkExperience", b =>
                {
                    b.Property<Guid>("experience_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("experience_skill")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("is_current")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("job_title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("experience_id");

                    b.HasIndex("user_id");

                    b.ToTable("Work_Experience");
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.HasOne("AIJobCareer.Models.Area", "Area")
                        .WithMany("companies")
                        .HasForeignKey("company_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");
                });

            modelBuilder.Entity("AIJobCareer.Models.Education", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.HasOne("AIJobCareer.Models.Company", "company")
                        .WithMany("jobs")
                        .HasForeignKey("job_company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplication", b =>
                {
                    b.HasOne("AIJobCareer.Models.Job", "Job")
                        .WithMany("job_application")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.Resume", "Resume")
                        .WithOne("JobApplication")
                        .HasForeignKey("AIJobCareer.Models.JobApplication", "resume_id");

                    b.Navigation("Job");

                    b.Navigation("Resume");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobSkill", b =>
                {
                    b.HasOne("AIJobCareer.Models.Job", "Job")
                        .WithMany("job_skills")
                        .HasForeignKey("JS_JOB_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.Skill", "Skill")
                        .WithMany("job_skills")
                        .HasForeignKey("JS_SKILL_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AIJobCareer.Models.Notification", b =>
                {
                    b.HasOne("AIJobCareer.Models.Company", "company")
                        .WithMany("notifications")
                        .HasForeignKey("notification_company_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AIJobCareer.Models.User", "user")
                        .WithMany("Notifications")
                        .HasForeignKey("notification_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("AIJobCareer.Models.Project", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Publication", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "user")
                        .WithMany("Resumes")
                        .HasForeignKey("resume_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.HasOne("AIJobCareer.Models.Area", "Area")
                        .WithMany("users")
                        .HasForeignKey("user_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AIJobCareer.Models.Company", "Company")
                        .WithOne("User")
                        .HasForeignKey("AIJobCareer.Models.User", "user_company_id");

                    b.Navigation("Area");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AIJobCareer.Models.UserSkill", b =>
                {
                    b.HasOne("AIJobCareer.Models.Skill", "Skill")
                        .WithMany("user_skills")
                        .HasForeignKey("US_SKILL_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("US_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.WorkExperience", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Area", b =>
                {
                    b.Navigation("companies");

                    b.Navigation("users");
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.Navigation("User");

                    b.Navigation("jobs");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.Navigation("job_application");

                    b.Navigation("job_skills");
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.Navigation("JobApplication")
                        .IsRequired();
                });

            modelBuilder.Entity("AIJobCareer.Models.Skill", b =>
                {
                    b.Navigation("job_skills");

                    b.Navigation("user_skills");
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("JobApplications");

                    b.Navigation("Notifications");

                    b.Navigation("Projects");

                    b.Navigation("Publications");

                    b.Navigation("Resumes");

                    b.Navigation("UserSkills");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
