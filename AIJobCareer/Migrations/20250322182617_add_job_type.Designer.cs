// <auto-generated />
using System;
using AIJobCareer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIJobCareer.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250322182617_add_job_type")]
    partial class add_job_type
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AIJobCareer.Models.Area", b =>
                {
                    b.Property<int>("area_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("area_id"));

                    b.Property<string>("area_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("area_id");

                    b.ToTable("AREA", (string)null);

                    b.HasData(
                        new
                        {
                            area_id = 1,
                            area_name = "Kuching"
                        },
                        new
                        {
                            area_id = 2,
                            area_name = "Miri"
                        },
                        new
                        {
                            area_id = 3,
                            area_name = "Sibu"
                        },
                        new
                        {
                            area_id = 4,
                            area_name = "Bintulu"
                        },
                        new
                        {
                            area_id = 5,
                            area_name = "Samarahan"
                        },
                        new
                        {
                            area_id = 6,
                            area_name = "Sri Aman"
                        },
                        new
                        {
                            area_id = 7,
                            area_name = "Kapit"
                        },
                        new
                        {
                            area_id = 8,
                            area_name = "Limbang"
                        },
                        new
                        {
                            area_id = 9,
                            area_name = "Sarikei"
                        },
                        new
                        {
                            area_id = 10,
                            area_name = "Betong"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.CareerAnalysis", b =>
                {
                    b.Property<int>("analysis_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("analysis_id"));

                    b.Property<string>("analysis_ai_career_prospects")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("analysis_ai_direction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("analysis_ai_market_gap")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("analysis_user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("analysis_id");

                    b.HasIndex("analysis_user_id");

                    b.ToTable("CAREER_ANALYSIS", (string)null);

                    b.HasData(
                        new
                        {
                            analysis_id = 1,
                            analysis_ai_career_prospects = "High potential for career growth in Sarawak's emerging digital economy. Projected salary increase of 15-20% in the next 3 years.",
                            analysis_ai_direction = "Based on your skills and experience, you have strong potential in software development. Consider specializing in energy sector applications or cloud technologies.",
                            analysis_ai_market_gap = "There is growing demand for developers with expertise in renewable energy systems in Sarawak. Consider upskilling in this area.",
                            analysis_user_id = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1")
                        },
                        new
                        {
                            analysis_id = 2,
                            analysis_ai_career_prospects = "Strong demand for conservation experts in both government and private sectors in Sarawak over the next 5 years.",
                            analysis_ai_direction = "Your environmental science background positions you well for conservation roles. Consider gaining project management certification.",
                            analysis_ai_market_gap = "Sarawak has increasing needs for environmental impact assessment specialists for sustainable development projects.",
                            analysis_user_id = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890")
                        },
                        new
                        {
                            analysis_id = 3,
                            analysis_ai_career_prospects = "Stable career prospects in Miri, with opportunities to transition to leadership roles in the next 2-3 years.",
                            analysis_ai_direction = "Your petroleum engineering experience is valuable. Consider expanding into renewable energy transition projects.",
                            analysis_ai_market_gap = "There is growing need for engineers who can bridge traditional oil & gas with renewable energy projects in Sarawak.",
                            analysis_user_id = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.Property<int>("company_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("company_id"));

                    b.Property<int?>("company_area_id")
                        .HasColumnType("int");

                    b.Property<string>("company_icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("company_intro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("company_website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("company_id");

                    b.HasIndex("company_area_id");

                    b.ToTable("COMPANY", (string)null);

                    b.HasData(
                        new
                        {
                            company_id = 1,
                            company_area_id = 1,
                            company_icon = "sarawak_energy_icon.png",
                            company_intro = "Leading energy provider in Sarawak focusing on renewable energy sources.",
                            company_name = "Sarawak Energy Berhad",
                            company_website = "https://www.sarawakenergy.com"
                        },
                        new
                        {
                            company_id = 2,
                            company_area_id = 2,
                            company_icon = "petronas_icon.png",
                            company_intro = "Oil and gas exploration company operating in Sarawak's offshore regions.",
                            company_name = "Petronas Carigali Sdn Bhd",
                            company_website = "https://www.petronas.com"
                        },
                        new
                        {
                            company_id = 3,
                            company_area_id = 1,
                            company_icon = "sfc_icon.png",
                            company_intro = "Responsible for sustainable management of Sarawak's forest resources.",
                            company_name = "Sarawak Forestry Corporation",
                            company_website = "https://www.sarawakforestry.com"
                        },
                        new
                        {
                            company_id = 4,
                            company_area_id = 5,
                            company_icon = "sdec_icon.png",
                            company_intro = "Driving digital transformation and innovation across Sarawak.",
                            company_name = "Sarawak Digital Economy Corporation",
                            company_website = "https://www.sdec.com.my"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("job_id"));

                    b.Property<DateTime>("Posted_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("job_benefit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("job_company_id")
                        .HasColumnType("int");

                    b.Property<string>("job_location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("job_requirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("job_responsible")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("job_salary_max")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("job_salary_min")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("job_status")
                        .IsRequired()
                        .HasColumnType("enum('open', 'closed')");

                    b.Property<string>("job_title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("job_type")
                        .IsRequired()
                        .HasColumnType("enum('internship', 'freelance', 'full_time', 'part_time', 'contract')");

                    b.HasKey("job_id");

                    b.HasIndex("job_company_id");

                    b.ToTable("JOB", (string)null);

                    b.HasData(
                        new
                        {
                            job_id = 1,
                            Posted_Date = new DateTime(2025, 3, 3, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8598),
                            job_benefit = "Health insurance, performance bonus, professional development allowance.",
                            job_company_id = 1,
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's degree in Computer Science, 5+ years experience in software development.",
                            job_responsible = "Develop and maintain enterprise software applications for energy management systems.",
                            job_salary_max = 7500.00m,
                            job_salary_min = 5000.00m,
                            job_status = "Open",
                            job_title = "Senior Software Developer",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 2,
                            Posted_Date = new DateTime(2025, 3, 13, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8603),
                            job_benefit = "Housing allowance, transportation, medical coverage, annual bonus.",
                            job_company_id = 2,
                            job_location = "Miri, Sarawak",
                            job_requirement = "Bachelor's degree in Petroleum Engineering, 5+ years field experience.",
                            job_responsible = "Oversee drilling operations and optimize oil extraction processes.",
                            job_salary_max = 9000.00m,
                            job_salary_min = 6500.00m,
                            job_status = "Open",
                            job_title = "Petroleum Engineer",
                            job_type = "Contract"
                        },
                        new
                        {
                            job_id = 3,
                            Posted_Date = new DateTime(2025, 1, 23, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8605),
                            job_benefit = "Field allowance, government pension scheme, paid study leave.",
                            job_company_id = 3,
                            job_location = "Kuching, Sarawak (with field work)",
                            job_requirement = "Bachelor's degree in Forestry or Environmental Science, knowledge of local ecosystems.",
                            job_responsible = "Implement and monitor forest conservation programs across Sarawak.",
                            job_salary_max = 5500.00m,
                            job_salary_min = 4000.00m,
                            job_status = "Open",
                            job_title = "Forest Conservation Officer",
                            job_type = "Part_Time"
                        },
                        new
                        {
                            job_id = 4,
                            Posted_Date = new DateTime(2024, 11, 23, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8608),
                            job_benefit = "Performance bonuses, flexible working arrangements, training opportunities.",
                            job_company_id = 4,
                            job_location = "Samarahan, Sarawak",
                            job_requirement = "Bachelor's degree in Marketing or Communications, experience with digital marketing tools.",
                            job_responsible = "Develop and implement digital marketing strategies for Sarawak's digital initiatives.",
                            job_salary_max = 5000.00m,
                            job_salary_min = 3500.00m,
                            job_status = "closed",
                            job_title = "Digital Marketing Specialist",
                            job_type = "Full_Time"
                        },
                        new
                        {
                            job_id = 5,
                            Posted_Date = new DateTime(2025, 2, 11, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8610),
                            job_benefit = "Professional development fund, health insurance, performance bonus.",
                            job_company_id = 1,
                            job_location = "Kuching, Sarawak",
                            job_requirement = "Bachelor's degree in Environmental Engineering or related field, knowledge of renewable energy technologies.",
                            job_responsible = "Analyze renewable energy projects and prepare feasibility reports.",
                            job_salary_max = 6000.00m,
                            job_salary_min = 4500.00m,
                            job_status = "Open",
                            job_title = "Renewable Energy Analyst",
                            job_type = "Internship"
                        },
                        new
                        {
                            job_id = 6,
                            Posted_Date = new DateTime(2025, 2, 17, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8612),
                            job_benefit = "Remote work options, medical coverage, professional development.",
                            job_company_id = 4,
                            job_location = "Samarahan, Sarawak",
                            job_requirement = "Bachelor's degree in Computer Science, proficiency in front-end and back-end technologies.",
                            job_responsible = "Design and develop web applications for Sarawak's digital economy initiatives.",
                            job_salary_max = 7000.00m,
                            job_salary_min = 4800.00m,
                            job_status = "Open",
                            job_title = "Full Stack Developer",
                            job_type = "Full_Time"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplication", b =>
                {
                    b.Property<int>("application_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("application_id"));

                    b.Property<int>("application_job_id")
                        .HasColumnType("int");

                    b.Property<string>("application_status")
                        .IsRequired()
                        .HasColumnType("enum('pending','interview_scheduled', 'accepted', 'rejected')");

                    b.Property<DateTime>("application_submission_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("application_type")
                        .IsRequired()
                        .HasColumnType("enum('internship', 'freelance', 'full_time', 'part_time', 'contract')");

                    b.HasKey("application_id");

                    b.HasIndex("application_job_id");

                    b.ToTable("JOB_APPLICATION", (string)null);

                    b.HasData(
                        new
                        {
                            application_id = 1,
                            application_job_id = 1,
                            application_status = "pending",
                            application_submission_date = new DateTime(2025, 3, 13, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8680),
                            application_type = "full_time"
                        },
                        new
                        {
                            application_id = 2,
                            application_job_id = 3,
                            application_status = "interview_scheduled",
                            application_submission_date = new DateTime(2025, 3, 8, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8682),
                            application_type = "full_time"
                        },
                        new
                        {
                            application_id = 3,
                            application_job_id = 2,
                            application_status = "pending",
                            application_submission_date = new DateTime(2025, 3, 18, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8683),
                            application_type = "contract"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplicationReview", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("review_id"));

                    b.Property<int>("review_application_id")
                        .HasColumnType("int");

                    b.Property<int>("review_company_id")
                        .HasColumnType("int");

                    b.Property<string>("review_context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("review_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("review_status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("review_id");

                    b.HasIndex("review_application_id");

                    b.HasIndex("review_company_id");

                    b.ToTable("JOB_APPLICATION_REVIEW", (string)null);

                    b.HasData(
                        new
                        {
                            review_id = 1,
                            review_application_id = 1,
                            review_company_id = 1,
                            review_context = "Strong technical background and relevant experience. Recommended for interview.",
                            review_date = new DateTime(2025, 3, 18, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8736),
                            review_status = "Positive"
                        },
                        new
                        {
                            review_id = 2,
                            review_application_id = 2,
                            review_company_id = 3,
                            review_context = "Excellent match for the position. Scientific background and conservation experience are ideal.",
                            review_date = new DateTime(2025, 3, 13, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8737),
                            review_status = "Very Positive"
                        },
                        new
                        {
                            review_id = 3,
                            review_application_id = 3,
                            review_company_id = 2,
                            review_context = "Good experience but may need additional training in offshore safety protocols.",
                            review_date = new DateTime(2025, 3, 20, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8739),
                            review_status = "Neutral"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplicationTable", b =>
                {
                    b.Property<int>("TABLE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TABLE_ID"));

                    b.Property<int>("TABLE_APPLICATION_ID")
                        .HasColumnType("int");

                    b.Property<string>("TABLE_COVER_LETTER")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TABLE_RESUME_ID")
                        .HasColumnType("int");

                    b.HasKey("TABLE_ID");

                    b.HasIndex("TABLE_APPLICATION_ID");

                    b.HasIndex("TABLE_RESUME_ID");

                    b.ToTable("JOB_APPLICATION_TABLE", (string)null);

                    b.HasData(
                        new
                        {
                            TABLE_ID = 1,
                            TABLE_APPLICATION_ID = 1,
                            TABLE_COVER_LETTER = "I am excited to apply for the Senior Software Developer position at Sarawak Energy. My experience developing enterprise applications aligns perfectly with your requirements.",
                            TABLE_RESUME_ID = 1
                        },
                        new
                        {
                            TABLE_ID = 2,
                            TABLE_APPLICATION_ID = 2,
                            TABLE_COVER_LETTER = "As an environmental scientist passionate about forest conservation, I am eager to contribute to Sarawak Forestry Corporation's mission of sustainable forest management.",
                            TABLE_RESUME_ID = 2
                        },
                        new
                        {
                            TABLE_ID = 3,
                            TABLE_APPLICATION_ID = 3,
                            TABLE_COVER_LETTER = "With my decade of experience in petroleum engineering, I am confident in my ability to contribute to Petronas Carigali's operations in Sarawak's offshore fields.",
                            TABLE_RESUME_ID = 3
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.JobSkill", b =>
                {
                    b.Property<int>("JS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("JS_ID"));

                    b.Property<int>("JS_JOB_ID")
                        .HasColumnType("int");

                    b.Property<int>("JS_SKILL_ID")
                        .HasColumnType("int");

                    b.HasKey("JS_ID");

                    b.HasIndex("JS_JOB_ID");

                    b.HasIndex("JS_SKILL_ID");

                    b.ToTable("JOB_SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            JS_ID = 1,
                            JS_JOB_ID = 1,
                            JS_SKILL_ID = 1
                        },
                        new
                        {
                            JS_ID = 2,
                            JS_JOB_ID = 1,
                            JS_SKILL_ID = 4
                        },
                        new
                        {
                            JS_ID = 3,
                            JS_JOB_ID = 2,
                            JS_SKILL_ID = 5
                        },
                        new
                        {
                            JS_ID = 4,
                            JS_JOB_ID = 3,
                            JS_SKILL_ID = 7
                        },
                        new
                        {
                            JS_ID = 5,
                            JS_JOB_ID = 4,
                            JS_SKILL_ID = 6
                        },
                        new
                        {
                            JS_ID = 6,
                            JS_JOB_ID = 6,
                            JS_SKILL_ID = 4
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Notification", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<int?>("notification_company_id")
                        .HasColumnType("int");

                    b.Property<string>("notification_status")
                        .IsRequired()
                        .HasColumnType("enum('read', 'unread')");

                    b.Property<string>("notification_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("notification_timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("notification_user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("notification_id");

                    b.HasIndex("notification_company_id");

                    b.HasIndex("notification_user_id");

                    b.ToTable("NOTIFICATION", (string)null);

                    b.HasData(
                        new
                        {
                            notification_id = 1,
                            notification_company_id = 1,
                            notification_status = "unread",
                            notification_text = "Your application for Senior Software Developer has been received. We will review it shortly.",
                            notification_timestamp = new DateTime(2025, 3, 13, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8708),
                            notification_user_id = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1")
                        },
                        new
                        {
                            notification_id = 2,
                            notification_company_id = 3,
                            notification_status = "read",
                            notification_text = "You have been shortlisted for the Forest Conservation Officer position. Please prepare for an interview.",
                            notification_timestamp = new DateTime(2025, 3, 15, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8710),
                            notification_user_id = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890")
                        },
                        new
                        {
                            notification_id = 3,
                            notification_company_id = 2,
                            notification_status = "unread",
                            notification_text = "Thank you for your application to Petronas Carigali. Your application is under review.",
                            notification_timestamp = new DateTime(2025, 3, 18, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8711),
                            notification_user_id = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.Property<int>("resume_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("resume_id"));

                    b.Property<string>("resume_file")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("resume_last_modify_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("resume_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("resume_user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("resume_id");

                    b.HasIndex("resume_user_id");

                    b.ToTable("RESUME", (string)null);

                    b.HasData(
                        new
                        {
                            resume_id = 1,
                            resume_file = "ahmad_resume.pdf",
                            resume_last_modify_time = new DateTime(2025, 3, 8, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8627),
                            resume_text = "Experienced software developer with expertise in .NET Core, React, and cloud technologies. Worked on enterprise applications for energy sector.",
                            resume_user_id = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1")
                        },
                        new
                        {
                            resume_id = 2,
                            resume_file = "siti_resume.pdf",
                            resume_last_modify_time = new DateTime(2025, 3, 16, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8629),
                            resume_text = "Environmental scientist focused on forest conservation. Experience in GIS mapping, biodiversity assessment, and sustainable forest management practices.",
                            resume_user_id = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890")
                        },
                        new
                        {
                            resume_id = 3,
                            resume_file = "rajesh_resume.pdf",
                            resume_last_modify_time = new DateTime(2025, 3, 2, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8630),
                            resume_text = "Petroleum engineer with extensive experience in offshore drilling. Skills include reservoir analysis, production optimization, and HSE compliance.",
                            resume_user_id = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.Skill", b =>
                {
                    b.Property<int>("skill_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("skill_id"));

                    b.Property<string>("skill_info")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("skill_level")
                        .IsRequired()
                        .HasColumnType("enum('beginner', 'intermediate', 'proficient', 'advanced', 'expert')");

                    b.Property<string>("skill_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("skill_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("skill_id");

                    b.ToTable("SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            skill_id = 1,
                            skill_info = "Microsoft .NET framework development",
                            skill_level = "Advanced",
                            skill_name = "C# Programming",
                            skill_type = "Technical"
                        },
                        new
                        {
                            skill_id = 2,
                            skill_info = "SQL Server, MySQL, PostgreSQL",
                            skill_level = "Intermediate",
                            skill_name = "Database Management",
                            skill_type = "Technical"
                        },
                        new
                        {
                            skill_id = 3,
                            skill_info = "Agile, Scrum, Kanban methodologies",
                            skill_level = "Advanced",
                            skill_name = "Project Management",
                            skill_type = "Management"
                        },
                        new
                        {
                            skill_id = 4,
                            skill_info = "HTML, CSS, JavaScript",
                            skill_level = "Advanced",
                            skill_name = "Web Development",
                            skill_type = "Technical"
                        },
                        new
                        {
                            skill_id = 5,
                            skill_info = "Oil and gas extraction techniques",
                            skill_level = "Expert",
                            skill_name = "Petroleum Engineering",
                            skill_type = "Technical"
                        },
                        new
                        {
                            skill_id = 6,
                            skill_info = "SEO, SEM, Social Media Marketing",
                            skill_level = "Intermediate",
                            skill_name = "Digital Marketing",
                            skill_type = "Marketing"
                        },
                        new
                        {
                            skill_id = 7,
                            skill_info = "Sustainable forest management practices",
                            skill_level = "Advanced",
                            skill_name = "Forestry Management",
                            skill_type = "Environmental"
                        },
                        new
                        {
                            skill_id = 8,
                            skill_info = "Customer service and hospitality management",
                            skill_level = "Intermediate",
                            skill_name = "Tourism & Hospitality",
                            skill_type = "Service"
                        },
                        new
                        {
                            skill_id = 9,
                            skill_info = "Understanding of Sarawak's indigenous cultures",
                            skill_level = "Expert",
                            skill_name = "Indigenous Culture Knowledge",
                            skill_type = "Cultural"
                        },
                        new
                        {
                            skill_id = 10,
                            skill_info = "Tropical agriculture techniques",
                            skill_level = "Advanced",
                            skill_name = "Agricultural Science",
                            skill_type = "Agricultural"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("last_login_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("user_account_created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("user_age")
                        .HasColumnType("int");

                    b.Property<int?>("user_area_id")
                        .HasColumnType("int");

                    b.Property<string>("user_contact_number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_first_name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("user_icon")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_intro")
                        .HasColumnType("longtext");

                    b.Property<string>("user_last_name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("user_password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_privacy_status")
                        .IsRequired()
                        .HasColumnType("enum('public', 'private')");

                    b.Property<string>("user_role")
                        .IsRequired()
                        .HasColumnType("enum('job_seeker', 'business')");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("user_id");

                    b.HasIndex("user_area_id");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);

                    b.HasData(
                        new
                        {
                            user_id = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1"),
                            user_account_created_time = new DateTime(2024, 9, 23, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8556),
                            user_age = 28,
                            user_area_id = 1,
                            user_contact_number = "0198765432",
                            user_email = "ahmad@example.com",
                            user_first_name = "Ahmad",
                            user_icon = "ahmad_profile.jpg",
                            user_intro = "Software developer with 5 years of experience in web technologies.",
                            user_last_name = "bin Ibrahim",
                            user_password = "hashed_password_1",
                            user_privacy_status = "public",
                            user_role = "job_seeker",
                            username = "ahmad_ibrahim"
                        },
                        new
                        {
                            user_id = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890"),
                            user_account_created_time = new DateTime(2024, 12, 23, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8578),
                            user_age = 32,
                            user_area_id = 3,
                            user_contact_number = "0123456789",
                            user_email = "siti@example.com",
                            user_first_name = "Siti",
                            user_icon = "siti_profile.jpg",
                            user_intro = "Environmental scientist with expertise in tropical forest conservation.",
                            user_last_name = "Nur Aminah",
                            user_password = "hashed_password_2",
                            user_privacy_status = "private",
                            user_role = "job_seeker",
                            username = "siti_aminah"
                        },
                        new
                        {
                            user_id = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c"),
                            user_account_created_time = new DateTime(2024, 6, 23, 2, 26, 17, 44, DateTimeKind.Local).AddTicks(8582),
                            user_age = 35,
                            user_area_id = 2,
                            user_contact_number = "0167890123",
                            user_email = "rajesh@example.com",
                            user_first_name = "Rajesh",
                            user_icon = "rajesh_profile.jpg",
                            user_intro = "Petroleum engineer with 10 years experience in offshore drilling.",
                            user_last_name = "Kumar",
                            user_password = "hashed_password_3",
                            user_privacy_status = "public",
                            user_role = "job_seeker",
                            username = "rajesh_kumar"
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.UserApplication", b =>
                {
                    b.Property<int>("UA_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UA_ID"));

                    b.Property<int>("UA_APPLICATION_ID")
                        .HasColumnType("int");

                    b.Property<Guid>("UA_USER_ID")
                        .HasColumnType("char(36)");

                    b.HasKey("UA_ID");

                    b.HasIndex("UA_APPLICATION_ID");

                    b.HasIndex("UA_USER_ID");

                    b.ToTable("USER_APPLICATION", (string)null);

                    b.HasData(
                        new
                        {
                            UA_ID = 1,
                            UA_APPLICATION_ID = 1,
                            UA_USER_ID = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1")
                        },
                        new
                        {
                            UA_ID = 2,
                            UA_APPLICATION_ID = 2,
                            UA_USER_ID = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890")
                        },
                        new
                        {
                            UA_ID = 3,
                            UA_APPLICATION_ID = 3,
                            UA_USER_ID = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.UserSkill", b =>
                {
                    b.Property<int>("US_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("US_ID"));

                    b.Property<int>("US_SKILL_ID")
                        .HasColumnType("int");

                    b.Property<Guid>("US_USER_ID")
                        .HasColumnType("char(36)");

                    b.HasKey("US_ID");

                    b.HasIndex("US_SKILL_ID");

                    b.HasIndex("US_USER_ID");

                    b.ToTable("USER_SKILL", (string)null);

                    b.HasData(
                        new
                        {
                            US_ID = 1,
                            US_SKILL_ID = 1,
                            US_USER_ID = new Guid("2cf8713a-be27-4a36-b4af-79d72ad8aad1")
                        },
                        new
                        {
                            US_ID = 2,
                            US_SKILL_ID = 7,
                            US_USER_ID = new Guid("025a6f5c-0526-4e13-9e24-a62f87aff890")
                        },
                        new
                        {
                            US_ID = 3,
                            US_SKILL_ID = 5,
                            US_USER_ID = new Guid("c6647276-ba32-42ff-b4b4-6628a37a0c8c")
                        });
                });

            modelBuilder.Entity("AIJobCareer.Models.CareerAnalysis", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("CareerAnalyses")
                        .HasForeignKey("analysis_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.HasOne("AIJobCareer.Models.Area", "Area")
                        .WithMany("companies")
                        .HasForeignKey("company_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.HasOne("AIJobCareer.Models.Company", "company")
                        .WithMany("jobs")
                        .HasForeignKey("job_company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplication", b =>
                {
                    b.HasOne("AIJobCareer.Models.Job", "job")
                        .WithMany("job_application")
                        .HasForeignKey("application_job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplicationReview", b =>
                {
                    b.HasOne("AIJobCareer.Models.JobApplication", "job_application")
                        .WithMany("job_application_reviews")
                        .HasForeignKey("review_application_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.Company", "company")
                        .WithMany("job_application_reviews")
                        .HasForeignKey("review_company_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("job_application");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplicationTable", b =>
                {
                    b.HasOne("AIJobCareer.Models.JobApplication", "JobApplication")
                        .WithMany("job_application_table")
                        .HasForeignKey("TABLE_APPLICATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.Resume", "Resume")
                        .WithMany("job_application_tables")
                        .HasForeignKey("TABLE_RESUME_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobApplication");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobSkill", b =>
                {
                    b.HasOne("AIJobCareer.Models.Job", "Job")
                        .WithMany("job_skills")
                        .HasForeignKey("JS_JOB_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.Skill", "Skill")
                        .WithMany("job_skills")
                        .HasForeignKey("JS_SKILL_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AIJobCareer.Models.Notification", b =>
                {
                    b.HasOne("AIJobCareer.Models.Company", "company")
                        .WithMany("notifications")
                        .HasForeignKey("notification_company_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AIJobCareer.Models.User", "user")
                        .WithMany("Notifications")
                        .HasForeignKey("notification_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.HasOne("AIJobCareer.Models.User", "user")
                        .WithMany("Resumes")
                        .HasForeignKey("resume_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.HasOne("AIJobCareer.Models.Area", "Area")
                        .WithMany("users")
                        .HasForeignKey("user_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");
                });

            modelBuilder.Entity("AIJobCareer.Models.UserApplication", b =>
                {
                    b.HasOne("AIJobCareer.Models.JobApplication", "job_application")
                        .WithMany("user_application")
                        .HasForeignKey("UA_APPLICATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("UserApplications")
                        .HasForeignKey("UA_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("job_application");
                });

            modelBuilder.Entity("AIJobCareer.Models.UserSkill", b =>
                {
                    b.HasOne("AIJobCareer.Models.Skill", "Skill")
                        .WithMany("user_skills")
                        .HasForeignKey("US_SKILL_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIJobCareer.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("US_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIJobCareer.Models.Area", b =>
                {
                    b.Navigation("companies");

                    b.Navigation("users");
                });

            modelBuilder.Entity("AIJobCareer.Models.Company", b =>
                {
                    b.Navigation("job_application_reviews");

                    b.Navigation("jobs");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("AIJobCareer.Models.Job", b =>
                {
                    b.Navigation("job_application");

                    b.Navigation("job_skills");
                });

            modelBuilder.Entity("AIJobCareer.Models.JobApplication", b =>
                {
                    b.Navigation("job_application_reviews");

                    b.Navigation("job_application_table");

                    b.Navigation("user_application");
                });

            modelBuilder.Entity("AIJobCareer.Models.Resume", b =>
                {
                    b.Navigation("job_application_tables");
                });

            modelBuilder.Entity("AIJobCareer.Models.Skill", b =>
                {
                    b.Navigation("job_skills");

                    b.Navigation("user_skills");
                });

            modelBuilder.Entity("AIJobCareer.Models.User", b =>
                {
                    b.Navigation("CareerAnalyses");

                    b.Navigation("Notifications");

                    b.Navigation("Resumes");

                    b.Navigation("UserApplications");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
